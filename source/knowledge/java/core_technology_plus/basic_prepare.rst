===========================
java的基本程序设计结构
===========================


java命名规范 [#]_
===================


* java是区分大小写的
* 类的命名，使用驼峰式命名的规范；如``FirstSample``
* 常量以全大写以及用下划线分割单词；如：``public static final String GAME_COLOR=”RED”``
* 方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头。例如： ``sendMessge``，``send``。方法
* 变量名同方法名一样，第一个第一个单词应以小写字母作为开头，后面的单词则用大写字母开头 ``message``,。
* 包名一律小写，使用小写字母同时不要使用下划线将单词分开，如 ``com.xxx.settlment``，不要 ``com.xxx.Settlement``，也不要 ``com.xxx.settlement.jsf_util``。

.. note:: 

   为了更好区分方法名以及变量名，同时在为变量和方法命名时最好取些有意义的名字，应尽量使用简短的英文单词。 较好的方法是：

   * 方法名以 **动词+名词** 为组合命名，如 ``initInformation``
   * 变量以 **冠词+名词/名词+名词** 为组合,如 ``studentInformation``, ``aInformation``

.. warning::
   
   所有命名规则必须遵循以下规则：

   #. 名称只能由字母、数字、下划线、$符号组成
   #. 不能以数字开头
   #. 名称不能使用JAVA中的关键字
   #. 最好不要出现中文及拼音命名

注释
=============

在 Java 中，有 3 种标记注释的方式。

* 最常用的方式是使用 // ，其注释内容从 // 开始到本行结尾。
* 当需要长篇的注释时，既可以在每行的注释前面标记 //，也可以使用 /\* 和 \*/ 将一段比较长的注释括起来。
* 第 3 种注释可以用来自动地生成文档。这种注释以 /\*\* 开始， 以 \*/ 结束。


数据类型
===========

**Java 是一种强类型语言**。这就意味着必须为每一个变量声明一种类型: **在Java 中，一共有 8 种基本类型（ primitive type )**, 其中有 4 种整型、2 种浮点类型、 1 种用于表示 Unicode 编码的字符单元的字符类型 char (请参见论述 char 类型的章节） 和 1 种用于表示真值的 boolean 类型。


+--------+--------+----------+---------------------------------------------------------+
|  类别  |  类型  | 存储需求 |                        取值范围                         |
+========+========+==========+=========================================================+
| 整型   | int    | 4 字节   | -2 147 483 648 ~ 2 147 483 647 (正好超过 20 亿)         |
|        +--------+----------+---------------------------------------------------------+
|        | short  | 2 字节   | -32 768 ~ 32 767                                        |
|        +--------+----------+---------------------------------------------------------+
|        | long   | 8字节    | -9 223 372 036 854 775 B08 ~ 9 223 372 036 854 775 807  |
|        +--------+----------+---------------------------------------------------------+
|        | byte   | 1 字节   | -128 ~ 127                                              |
+--------+--------+----------+---------------------------------------------------------+
| 浮点数 | float  | 4 字节   | 大约 ± 3.402 823 47E+38F (有效位数为 6 ~ 7 位）         |
|        +--------+----------+---------------------------------------------------------+
|        | double | 8 宇节   | 大约 ± 1.797 693 134 862 315 70E+308 (有效位数为 15 位> |
+--------+--------+----------+---------------------------------------------------------+
| 字符   | char   | 2字节    |                                                         |
+--------+--------+----------+---------------------------------------------------------+


.. note:: 

   下面是用于表示溢出和出错情况的三个特殊的浮点数值：

   * 正无穷大
   * 负无穷大
   * NaN (不是一个数字）


.. warning:: 

   不建议在 Java 程序中使用 char 数据类型。 :ref:`参见 Java 中 char 和 String 的细节和使用注意 <not-using-char>` 


枚举类型
=========

有时候，变量的取值只在一个有限的集合内。例如： 销售的服装或比萨饼只有小、中、大和超大这四种尺寸。当然， 可以将这些尺寸分别编码为 1、2、3、4 或 S、 M、 L、X。但这样存在着一定的隐患。在变量中很可能保存的是一个错误的值（如 0 或 m)。

针对这种情况， 可以自定义枚举类型。枚举类型包括有限个命名的值。 

.. code-block:: java

   enum Size {SMALL,MEDIUM,LARGE,EXTRA_LARGE};

   public class Test {
      public static void main(String[] args) {
         Size size=Size.SMALL;
         System.out.println(size);
      }
   }

枚举类型（如上代码中的Size类）的变量只能存储这个类型声明中给定的某个枚举值，或者 null 值，null 表示这个变量没有设置任何值。

字符串类型String
==================



----

.. [#] 虽然java的命名规范是宽松的，但是最好一个程序员要有良好的编程命名规范。